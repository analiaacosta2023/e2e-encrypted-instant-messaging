generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ShareType {
  NONE
  CONTACTS
  EVERYONE
}

enum ContactStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model User {
  id              Int              @id @default(autoincrement())
  publicKey       String           @unique
  alias           String?          @unique
  phoneNumber     String?          @unique
  name            String?
  emoji           String?
  status          String?
  image           String?
  privacySettings PrivacySettings?
  createdAt       DateTime         @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)
  updateAt        DateTime         @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)

  Contacts      Contact[]         @relation("contacts")
  ContactAddred Contact[]         @relation("contact_added")
  Messages      Message[]
  Channels      UsersToChannels[] @relation("recipient")
  AssignedUsers UsersToChannels[] @relation("assignedBy")

  @@map("user")
}

model PrivacySettings {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneSearch Boolean   @default(true)
  aliasSearch Boolean   @default(true)
  phoneShare  ShareType @default(CONTACTS)
  emojiShare  ShareType @default(CONTACTS)
  nameShare   ShareType @default(CONTACTS)
  imageShare  ShareType @default(CONTACTS)
  statusShare ShareType @default(CONTACTS)

  @@map("privacy_settings")
}

model Contact {
  id        Int           @id @default(autoincrement())
  userId    Int           @unique
  user      User          @relation("contacts", fields: [userId], references: [id], onDelete: Cascade)
  contactId Int           @unique
  contact   User          @relation("contact_added", fields: [contactId], references: [id], onDelete: Cascade)
  status    ContactStatus @default(PENDING)
  createdAt DateTime      @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)
  updateAt  DateTime      @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)

  @@map("contacts")
}

model Channel {
  id        Int      @id @default(autoincrement())
  publicKey String   @unique
  name      String?
  status    String?
  bio       String?
  image     String?
  createdAt DateTime @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)
  updateAt  DateTime @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)

  Message         Message[]
  UsersToChannels UsersToChannels[]

  @@map("channel")
}

model UsersToChannels {
  recipientId  Int
  recipient    User     @relation("recipient", fields: [recipientId], references: [id])
  channelId    Int
  channel      Channel  @relation(fields: [channelId], references: [id])
  assignedById Int
  assignedBy   User     @relation("assignedBy", fields: [assignedById], references: [id], onDelete: Cascade)
  addedAt      DateTime @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)

  ReadReceipt ReadReceipt[]

  @@id([recipientId, channelId])
  @@map("users_to_channels")
}

model Message {
  id               String   @id @db.Char(21)
  senderId         Int
  sender           User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  recipientId      Int
  recipient        Channel  @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  encryptedMessage String
  sentTime         DateTime
  signature        String
  createdAt        DateTime @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)
  updateAt         DateTime @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)

  ReadReceipt ReadReceipt[]

  @@map("message")
}

model ReadReceipt {
  messageId   String          @db.Char(21)
  message     Message         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  recipientId Int
  channelId   Int
  recipient   UsersToChannels @relation(fields: [recipientId, channelId], references: [recipientId, channelId], onDelete: Cascade)
  readAt      DateTime        @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)

  @@id([recipientId, channelId, messageId])
  @@map("read_receipt")
}
